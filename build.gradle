buildscript {
    repositories {
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        mavenCentral()
        maven {
            name = 'Jitpack'
            url 'https://jitpack.io/'
        }
    }
    dependencies {
        classpath 'com.github.calmilamsy:Fabric-Loom:d4e2c31'
    }
}

def getSubprojectVersion(project, ver) {
    return "${project.mod_version}-$ver"
}

def moduleDependencies(Project project, String... projectNames) {
    project.with {
        def modules = projectNames.collect { dependencies.project(path: ":$it", configuration: 'dev') }

        dependencies {
            modules.each {
                implementationOnly it
            }
        }
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    pom.withXml {
                        addDependency(it, 'implementation', *modules)
                    }
                }
            }
        }
    }
}

void addDependency(XmlProvider xml, String scope, Object... dependencies) {
    def dependenciesNode = net.fabricmc.loom.util.GroovyXmlUtil.getOrCreateNode(xml.asNode(), "dependencies")

    dependencies.each {dependency ->
        dependenciesNode.appendNode('dependency').with {
            appendNode('groupId', dependency.group)
            appendNode('artifactId', dependency.name)
            appendNode('version', dependency.version)
            appendNode('scope', scope)
        }
    }
}

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

    repositories {
        maven {
            name = 'HalfOf2'
            url = 'https://storage.googleapis.com/devan-maven/'
        }
        maven {
            name = 'Froge'
            url 'https://maven.minecraftforge.net/'
        }
        maven {
            name = 'Jitpack'
            url 'https://jitpack.io/'
        }
    }

    configurations {
        implementationOnly //A non-transitive implementation
        runtimeClasspath.extendsFrom implementationOnly
        compileClasspath.extendsFrom implementationOnly

    }

    minecraft {
        addLibraryFilter {library ->
            return !(library.startsWith('net.minecraft:launchwrapper:') ||
                    library.startsWith('net.sf.jopt-simple:jopt-simple:') ||
                    library.startsWith('org.ow2.asm:asm-all:') ||
                    library.startsWith('net.fabricmc:sponge-mixin:') ||
                    library.startsWith('org.lwjgl.lwjgl:'))
        }
    }

    dependencies {
        implementation 'org.lwjgl:lwjgl:3.3.0'
        implementation 'org.lwjgl:lwjgl-glfw:3.3.0'
        implementation 'org.lwjgl:lwjgl-jemalloc:3.3.0'
        implementation 'org.lwjgl:lwjgl-openal:3.3.0'
        implementation 'org.lwjgl:lwjgl-opengl:3.3.0'
        implementation 'org.lwjgl:lwjgl-stb:3.3.0'
        implementation 'org.lwjgl:lwjgl-tinyfd:3.3.0'
        implementation group: 'org.lwjgl', name: 'lwjgl', version:'3.3.0', classifier:'natives-windows'
        implementation group: 'org.lwjgl', name: 'lwjgl-opengl', version:'3.3.0', classifier:'natives-windows'
        implementation group: 'org.lwjgl', name: 'lwjgl-glfw', version:'3.3.0', classifier:'natives-windows'
        implementation group: 'org.lwjgl', name: 'lwjgl-stb', version:'3.3.0', classifier:'natives-windows'
        implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
        annotationProcessor group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
        implementation 'net.fabricmc:sponge-mixin:0.11.1+mixin.0.8.5'

        //to change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"

        mappings loom.fromCommit("calmilamsy/BIN-Mappings", "${project.yarn_mappings}") {spec ->
            spec.version = "b1.7.3-${project.yarn_mappings}"
        }

        modImplementation("net.fabricmc:fabric-loader:${project.loader_version}") {
            transitive false //Avoid leaking Loader's dependencies forwards
        }

        implementationOnly "org.apache.commons:commons-lang3:3.5"
        implementationOnly "commons-io:commons-io:2.5"
        implementation "net.jodah:typetools:${project.typetools_version}"
        implementation "com.github.mineLdiver:expressions:${project.expressions_version}"
        implementation "com.github.mineLdiver:UnsafeEvents:${project.unsafeevents_version}"
        implementation "it.unimi.dsi:fastutil:${project.fastutil_version}"
        //noinspection GradlePackageUpdate
        implementation "com.github.ben-manes.caffeine:caffeine:${project.caffeine_version}"
        implementation "com.mojang:datafixerupper:${project.dfu_version}"

        // convenience stuff
        // adds some useful annotations for data classes. does not add any dependencies
        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
        testCompileOnly 'org.projectlombok:lombok:1.18.22'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

        // adds some useful annotations for miscellaneous uses. does not add any dependencies, though people without the lib will be missing some useful context hints.
        implementationOnly 'org.jetbrains:annotations:20.1.0'
    }

    sourceSets {
        test {
            compileClasspath += main.compileClasspath + main.output
            runtimeClasspath += main.runtimeClasspath + main.output
        }
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this task, sources will not be generated.
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // Makes java shut up
    compileJava {
        options.compilerArgs << '-XDignore.symbol.file'
        options.fork = true
        options.forkOptions.executable = project.hasProperty("override_javac")? project.override_javac : 'javac'
    }

    publishing {
        repositories {
            if (project.hasProperty("glass_maven_url")) {
                maven {
                    url = "${project.glass_maven_url}"
                    credentials {
                        username "${project.glass_maven_username}"
                        password "${project.glass_maven_password}"
                    }
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                afterEvaluate {
                    artifact(remapJar) {
                        builtBy remapJar
                    }

                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }

                pom {
                    withXml {
                        def depsNode = asNode().appendNode("dependencies")
                        subprojects.each {
                            def depNode = depsNode.appendNode("dependency")
                            depNode.appendNode("groupId", it.group)
                            depNode.appendNode("artifactId", it.name)
                            depNode.appendNode("version", it.version)
                            depNode.appendNode("scope", "compile")
                        }

                        // Jank solution to an annoying issue
                        ArrayList<String[]> deps = new ArrayList<>()
                        deps.add(["net.jodah", "typetools", "${project.typetools_version}"] as String[])
                        deps.add(["com.github.mineLdiver", "expressions", "${project.expressions_version}"] as String[])
                        deps.add(["com.github.mineLdiver", "UnsafeEvents", "${project.unsafeevents_version}"] as String[])
                        deps.add(["it.unimi.dsi", "fastutil", "${project.fastutil_version}"] as String[])
                        deps.add(["com.github.ben-manes.caffeine", "caffeine", "${project.caffeine_version}"] as String[])
                        deps.add(["com.mojang", "datafixerupper", "${project.dfu_version}"] as String[])
                        deps.add(["org.apache.commons", "commons-lang3", "3.5"] as String[])
                        deps.add(["commons-io", "commons-io", "2.5"] as String[])
                        deps.each {
                            def depNode = depsNode.appendNode("dependency")
                            depNode.appendNode("groupId", it[0])
                            depNode.appendNode("artifactId", it[1])
                            depNode.appendNode("version", it[2])
                            depNode.appendNode("scope", "compile")
                        }
                    }
                }
            }
        }
    }
}

import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask

//Subprojects will set these themselves
//Not neatly. - calm
project.group = project.maven_group
project.archivesBaseName = project.archives_base_name
project.version = project.hasProperty("override_version")? project.override_version : project.mod_version

subprojects {subproject ->

    assert this.remapJar != remapJar //No accidents moving this around
    this.remapJar.dependsOn(remapJar)

    group = project.maven_group + ".${project.parent.archivesBaseName}.${project.hasProperty("override_version")? project.override_version : project.mod_version}"

    configurations {
        out {
            canBeConsumed = true
            canBeResolved = false
        }
        dev {
            canBeConsumed = true
            canBeResolved = false
        }
        test {
            canBeConsumed = true
            canBeResolved = false
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier 'test'
    }

    artifacts {
        out remapJar
        dev jar
        test testJar
    }

    //Attach the subproject to the root project
    this.dependencies {
        implementationOnly project(path: ":$name", configuration: 'dev')
        testImplementation project(path: ":$name", configuration: 'test')
        include project(path: ":$name", configuration: 'out')
    }

    //Mark the subproject as a compile time dependency of the root project
    this.publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {xml ->
                    addDependency(xml, 'compile', subproject)
                }
            }
        }
    }
}

dependencies {
    include "net.jodah:typetools:${project.typetools_version}"
    include "com.github.mineLdiver:expressions:${project.expressions_version}"
    include "com.github.mineLdiver:UnsafeEvents:${project.unsafeevents_version}"
    include "it.unimi.dsi:fastutil:${project.fastutil_version}"
    //noinspection GradlePackageUpdate
    include "com.github.ben-manes.caffeine:caffeine:${project.caffeine_version}"
    include "com.mojang:datafixerupper:${project.dfu_version}"
}

// Makes java shut up
compileTestJava {
    options.compilerArgs << '-XDignore.symbol.file'
    options.fork = true
    options.forkOptions.executable = project.hasProperty("override_javac")? project.override_javac : 'javac'
}

publishing.publications.mavenJava(MavenPublication) {
    artifactId project.archives_base_name
}

task runTestmodClient(type: RunClientTask) {
    classpath sourceSets.test.runtimeClasspath
}

task runTestmodServer(type: RunServerTask) {
    classpath sourceSets.test.runtimeClasspath
}

task testJar(type: Jar) {
    from sourceSets.test.output
    classifier 'test'
}
